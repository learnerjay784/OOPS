{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyN6r+tMeS3EwyFVSuVfq/u5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"_IrCugxiNMXK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664726560194,"user_tz":-330,"elapsed":34,"user":{"displayName":"Jay Barode","userId":"13781167781472862626"}},"outputId":"06bf6646-cc07-4894-f6c6-a337c6cf7731"},"source":["#Object Oriented Programming...\n","#257 HOw to define a class\n","class student:\n","  '''This class is developed by jay for demo purpose'''\n","  #variables5.\n","  #behaviour\n","print(student.__doc__)\n","help(student)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["This class is developed by jay for demo purpose\n","Help on class student in module __main__:\n","\n","class student(builtins.object)\n"," |  This class is developed by jay for demo purpose\n"," |  \n"," |  Data descriptors defined here:\n"," |  \n"," |  __dict__\n"," |      dictionary for instance variables (if defined)\n"," |  \n"," |  __weakref__\n"," |      list of weak references to the object (if defined)\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"2aAtXMeVny5c"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#258\n","class student:\n","  '''This class is developed by jay for demo purpose'''\n","  def __init__(self):\n","    self.name='Durga'\n","    self.rollno=101\n","    self.marks=90\n","\n","  def talk(self):\n","    print('Hello My name is',self.name)\n","    print('My Roll no. is :',self.rollno)\n","    print('My marks are :',self.marks)\n","s=student()  #reference variable\n","print(s.name)\n","print(s.rollno)\n","print(s.marks)\n","s.talk()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kNenY6midWoT","executionInfo":{"status":"ok","timestamp":1639596051930,"user_tz":-330,"elapsed":630,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"a4b425a7-8ef6-4b2b-d300-609f572244a8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Durga\n","101\n","90\n","Hello My name is Durga\n","My Roll no. is : 101\n","My marks are : 90\n"]}]},{"cell_type":"code","source":["class student:\n","  '''This class is developed by jay for demo purpose'''\n","  def __init__(self,name,rollno,marks):\n","    self.name=name\n","    self.rollno=rollno\n","    self.marks=marks\n","\n","  def talk(self):\n","    print('Hello My name is',self.name)\n","    print('My Roll no. is :',self.rollno)\n","    print('My marks are :',self.marks)\n","s1=student('sunny',101,90)\n","s2=student('bunny',102,95)  #reference variable\n","s1.talk()    \n","s2.talk()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VPfJOQRklOiY","executionInfo":{"status":"ok","timestamp":1639596916266,"user_tz":-330,"elapsed":9,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"3ac34eab-16c6-4687-bfcf-d116491be8ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello My name is sunny\n","My Roll no. is : 101\n","My marks are : 90\n","\n","Hello My name is bunny\n","My Roll no. is : 102\n","My marks are : 95\n"]}]},{"cell_type":"code","source":["#259 self variable\n","\n","class test:\n","  def __init__(self):\n","      print('The address of object pointed by self',id(self))\n","t=test()\n","print('The address of object pointed by self',id(t))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JoUU0sZ6iNM5","executionInfo":{"status":"ok","timestamp":1639597538341,"user_tz":-330,"elapsed":10,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"f29c6e07-902e-49ed-ef91-26a17fa6f7c0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The address of object pointed by self 140159325037456\n","The address of object pointed by self 140159325037456\n"]}]},{"cell_type":"code","source":["class test:\n","  def __init__(self):\n","    print('constructor')\n","  def m1(self,x):\n","    print('x value is :',x)\n","t=test()\n","t.m1=10\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YFB3R9-XoLYl","executionInfo":{"status":"ok","timestamp":1639598213849,"user_tz":-330,"elapsed":31,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"004fc2c9-c737-4eab-f292-ed16571a817e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["constructor\n"]}]},{"cell_type":"code","source":["#261 \n","class test:\n","  def __init__(self):\n","    print('Constructor execution...')\n","t1=test()\n","t2=test()"],"metadata":{"id":"28UN5ydEquZ7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639648037554,"user_tz":-330,"elapsed":10,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"aa2b1a14-3e68-4789-e59d-e821f0d2e950"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Constructor execution...\n","Constructor execution...\n"]}]},{"cell_type":"code","source":["class student:\n","  def __init__(self,name,rollno,marks):\n","    print('Creating instance variable and performing execution...')\n","    self.name=name\n","    self.rollno=rollno\n","    self.marks=marks\n","s1=student('Sunny',101,90)\n","print(s1.name,s1.rollno,s1.marks)\n","s2=student('Bunny',102,95)\n","print(s2.name,s2.rollno,s2.marks)\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KuWtaZJ9n1Cj","executionInfo":{"status":"ok","timestamp":1639649245902,"user_tz":-330,"elapsed":435,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"1a27fe4c-bf26-4ef3-9147-400332e8f987"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Creating instance variavle and performing execution...\n","Sunny 101 90\n","Creating instance variavle and performing execution...\n","Bunny 102 95\n"]}]},{"cell_type":"code","source":["#262\n","class test:\n","  def m1(self):\n","    print('Method execution...')\n","t=test()\n","t.m1()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dQXUdDeTtOgd","executionInfo":{"status":"ok","timestamp":1639658245945,"user_tz":-330,"elapsed":12,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"9db09891-861c-4e28-89dc-b157f44b1da2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Method execution...\n"]}]},{"cell_type":"code","source":["class test:\n","  def __init__(self):\n","    print('No arg constructor..')\n","  def __init__(self,x):\n","    print('One arg constructor')\n","#t=test()\n","t=test(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4CAkZHLFPvwu","executionInfo":{"status":"ok","timestamp":1639659457848,"user_tz":-330,"elapsed":10,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"9671fc0b-03f0-4086-8caf-0833d0ec115c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["One arg constructor\n"]}]},{"cell_type":"code","source":["#263\n","class movie:\n","  def __init__(self,title,hero,heroine):\n","    self.title=title\n","    self.hero=hero\n","    self.heroine=heroine\n","  \n","  def info(self):\n","    print('Movie name:',self.title)\n","    print('Hero name:',self.hero)\n","    print('Heroine name:',self.heroine)\n","\n","list_of_movies=[]\n","while True:\n","  title=input('Enter Movie Name:')\n","  hero=input('Enter Hero Name:')\n","  heroine=input('Enter heroine Name:')\n","  m=movie(title,hero,heroine)  # creating object\n","  list_of_movies.append(m)\n","  print('Movie added to the list successfully..')\n","  option=input('Do you want to add more movie [Yes/No]:')\n","  if option.lower()=='no':\n","    print()\n","    break\n","print('All movies inforamation...')\n","for movie in list_of_movies:\n","  movie.info()\n","  print()\n","\n"],"metadata":{"id":"Mnc0FQHsUSm6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640285398417,"user_tz":-330,"elapsed":175701,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"63687513-f96a-49aa-b0ee-0f20c7003c5c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter Movie Name:Bahubali\n","Enter Hero Name:Prabhas\n","Enter heroine Name:Anushka\n","Movie added to the list successfully..\n","Do you want to add more movie [Yes/No]:yes\n","Enter Movie Name:Sultan\n","Enter Hero Name:Salman\n","Enter heroine Name:Anushka\n","Movie added to the list successfully..\n","Do you want to add more movie [Yes/No]:yes\n","Enter Movie Name:DDLG\n","Enter Hero Name:Sahrukh\n","Enter heroine Name:Kajol\n","Movie added to the list successfully..\n","Do you want to add more movie [Yes/No]:Phantom\n","Enter Movie Name:Saif\n","Enter Hero Name:Katrina\n","Enter heroine Name:saif\n","Movie added to the list successfully..\n","Do you want to add more movie [Yes/No]:no\n","\n","All movies inforamation...\n","Movie name: Bahubali\n","Hero name: Prabhas\n","Heroine name: Anushka\n","\n","Movie name: Sultan\n","Hero name: Salman\n","Heroine name: Anushka\n","\n","Movie name: DDLG\n","Hero name: Sahrukh\n","Heroine name: Kajol\n","\n","Movie name: Saif\n","Hero name: Katrina\n","Heroine name: saif\n","\n"]}]},{"cell_type":"code","source":["#264\n","class Test:\n","  def Test(self):\n","    print('It is some special method')\n","t=Test() #constructor will be executed __init__()\n","t.Test() #Test() method will be executed"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-N9N1N-ClZjq","executionInfo":{"status":"ok","timestamp":1640287547425,"user_tz":-330,"elapsed":9,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"cb5b7b27-d52f-441e-bd95-cdcc296052ed"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["It is some special method\n"]}]},{"cell_type":"code","source":["#265\n","class student:\n","  school_name='Durgasoft' #static variable\n","  def __init__(self,name,rollno):\n","    self.name=name        #instance variable\n","    self.rollno=rollno    #instance variable\n","  def info(self):\n","    x=10          #local variable\n","    for i in range(x):\n","      print(i)\n"],"metadata":{"id":"Et8uyDzPwaXZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#266 \n","class student:\n","  school_name='Durgasoft' #static variable\n","  def __init__(self,name,rollno):\n","    self.name=name        #instance variable\n","    self.rollno=rollno    #instance variable\n","  def get_school_info(self):\n","    print('Student name:',self.name)         #instance method\n","    print('Student roll no:',self.rollno)    #instance method\n"],"metadata":{"id":"hORyWtpKjXlG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#267\n","class Test:\n","  def __init__(self):\n","    self.a=10        \n","    self.b=20      # 1st way - Instance variable declared inside the constructor\n","  def m1(self):\n","    self.c=30      #2nd way - Instance variable declared inside method\n","\n","t=Test()  #a,b will be added to object because constructor is executed once for every object\n","t.m1()     # c will be added to object\n","t.d=40    # 3rd way - Instance variable declared outside the class by using object reference variable     # d will be added to object\n","print(t.__dict__)"],"metadata":{"id":"_Rc8zd9IjXyu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640373090370,"user_tz":-330,"elapsed":686,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"b2ff9bcc-a8c3-4071-bc26-ea6cc3868fbe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'a': 10, 'b': 20, 'c': 30, 'd': 40}\n"]}]},{"cell_type":"code","source":["class Test:\n","  def __init__(self):\n","    self.a=10        \n","    self.b=20      # 1st way - Instance variable declared inside the constructor\n","  def m1(self):\n","    self.c=30      #2nd way - Instance variable declared inside method\n","\n","t1=Test()  #a,b will be added to t1 because constructor is executed once for every object\n","t1.m1()     # c will be added to t1\n","t1.d=40      #d will be added to t1\n","t2=Test()   # d will be added to t2\n","print(t1.__dict__)\n","print(t2.__dict__)\n"],"metadata":{"id":"1k64nqH7jYHt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640374935330,"user_tz":-330,"elapsed":463,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"ce761558-debe-4c6c-a65b-f3eaec200a04"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'a': 10, 'b': 20, 'c': 30, 'd': 40}\n","{'a': 10, 'b': 20}\n"]}]},{"cell_type":"code","source":["#268\n","#HOW TO ACCESS INSTANCE VARIABLE\n","class Test:\n","  def __init__(self):\n","    self.a=10        \n","    self.b=20     \n","  def display(self):\n","    print(self.a)  #10\n","    print(self.b)  #20 \n","\n","t=Test()\n","t.display()\n","print(t.a)\n","print(t.b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bJdeEG6G9xqb","executionInfo":{"status":"ok","timestamp":1640375457731,"user_tz":-330,"elapsed":963,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"0a5481d2-3e0c-4f35-b8ca-1a6ce5932e3a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","20\n","10\n","20\n"]}]},{"cell_type":"code","source":["#HOW TO DELLETE INSTANCE VARIABLE \n","class Test():\n","  def __init__(self):\n","    self.a=10\n","    self.b=20\n","    self.c=30\n","    self.d=40\n","  def m1(self):\n","    del self.c  # deleting within the class\n","\n","t1=Test()\n","t1.m1()\n","print('t1:',t1.__dict__)\n","t2=Test()\n","del t2.b,t2.d    #deleting outside the class\n","print('t2:',t2.__dict__)\n","\n","\n","  "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fSEJXdy0_xD5","executionInfo":{"status":"ok","timestamp":1640376217949,"user_tz":-330,"elapsed":443,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"913e7239-745e-4139-a11b-5244f33da79b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["t1: {'a': 10, 'b': 20, 'd': 40}\n","t2: {'a': 10, 'c': 30}\n"]}]},{"cell_type":"code","source":["#269 VARIOUS PLACES TO DECLARE STATIC VARIABLE \n","class Test:\n","  a=10        #1ST WAY\n","  def __init__(self):\n","    Test.b=20         #2nd way\n","  def m1(self):\n","    Test.c=30          #3rd way\n","  @classmethod\n","  def m2(cls):\n","    cls.d=40             #4th way\n","    Test.e=50            #4th way\n","  @staticmethod\n","  def m3():\n","    Test.f=60           #5th way\n","\n","t=Test()\n","t.m1()\n","Test.m2()\n","Test.m3()\n","Test.g=70             #6th way\n","print(Test.__dict__)\n","\n","\n","\n"],"metadata":{"id":"gH4HdlNBCTF7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640599035057,"user_tz":-330,"elapsed":14,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"68ecc22d-3686-43da-daf1-05339444ac27"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'__module__': '__main__', 'a': 10, '__init__': <function Test.__init__ at 0x7fc86e88d3b0>, 'm1': <function Test.m1 at 0x7fc86e89fa70>, 'm2': <classmethod object at 0x7fc86e939850>, 'm3': <staticmethod object at 0x7fc86e9398d0>, '__dict__': <attribute '__dict__' of 'Test' objects>, '__weakref__': <attribute '__weakref__' of 'Test' objects>, '__doc__': None, 'b': 20, 'c': 30, 'd': 40, 'e': 50, 'f': 60, 'g': 70}\n"]}]},{"cell_type":"code","source":["#270 HOW TO ACCESS STATIC VARIABLE\n","class Test():\n","  a=10\n","  def __init__(self):\n","    print(self.a)\n","    print(Test.a)\n","  def m1(self):\n","    print(self.a)\n","    print(Test.a)\n","  @classmethod\n","  def m2(cls):\n","    print(cls.a)\n","    print(Test.a)\n","  @staticmethod\n","  def m3():\n","    print(Test.a)\n","\n","t=Test()\n","t.m1()\n","Test.m2()\n","Test.m3()\n","print(t.a)\n","print(Test.a)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xGYKfbJHQezr","executionInfo":{"status":"ok","timestamp":1640603240662,"user_tz":-330,"elapsed":567,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"0590a455-66fc-4e2a-d1d8-732678586fc5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","10\n","10\n","10\n","10\n","10\n","10\n","10\n","10\n"]}]},{"cell_type":"code","source":["#271 HOW TO MODIFY THE VALUE OF STATIC VARIABLE \n","class Test:\n","  a=10\n","  def __init__(self):\n","    Test.a=20\n","  def m1(self):\n","    Test.a=30\n","  @classmethod\n","  def m2(cls):\n","    cls.a=40\n","    Test.a=50\n","  @staticmethod\n","  def m3():\n","    Test.a=60\n","\n","t=Test()\n","t.m1()\n","Test.m2()\n","Test.m3()\n","Test.a=70\n","print(Test.a)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mAO77FS5go6u","executionInfo":{"status":"ok","timestamp":1640604396028,"user_tz":-330,"elapsed":1516,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"13c86a57-246e-4070-c42a-d54f7d4ac2f8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["70\n"]}]},{"cell_type":"code","source":["#272\n","#Ex.1\n","class Test:\n","  a=10\n","  def m1(self):\n","    self.a=888\n","\n","t1=Test()\n","t1.m1()\n","print(Test.a)\n","print(t1.a)\n","\n","#Ex.2\n","class Test:\n","  a=10\n","  def m1(self):\n","    Test.a=888\n","\n","t1=Test()\n","t1.m1()\n","print(Test.a)\n","print(t1.a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8AcxSg_1m-V8","executionInfo":{"status":"ok","timestamp":1640607147891,"user_tz":-330,"elapsed":14,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"82466c39-4753-41e4-d48b-f5081f5112ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","888\n","888\n","888\n"]}]},{"cell_type":"code","source":["#Ex.3\n","class Test:\n","  a=10\n","  def __init__(self):\n","    self.b=20\n","  \n","t1=Test()\n","t2=Test()\n","print('t1:',t1.a,t1.b)\n","print('t2:',t2.a,t2.b)\n","t1.a=888\n","t1.b=999\n","print('t1:',t1.a,t1.b)\n","print('t2:',t2.a,t2.b)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9QB_N_rsxz91","executionInfo":{"status":"ok","timestamp":1640607699555,"user_tz":-330,"elapsed":633,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"07d9360b-51c4-4ceb-d0f4-760b4bd4327d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["t1: 10 20\n","t2: 10 20\n","t1: 888 999\n","t2: 10 20\n"]}]},{"cell_type":"code","source":["#Ex.4\n","class Test:\n","  a=10\n","  def __init__(self):\n","    self.b=20\n","  \n","t1=Test()\n","t2=Test()\n","print('t1:',t1.a,t1.b)\n","print('t2:',t2.a,t2.b)\n","Test.a=888\n","Test.b=999\n","print('t1:',t1.a,t1.b)\n","print('t2:',t2.a,t2.b)\n","print('Test:',Test.a,Test.b)\n"],"metadata":{"id":"xrwvkzHB1sva","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640684373223,"user_tz":-330,"elapsed":19,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"64d33639-3dbd-4a7f-a9b9-75740730c8ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["t1: 10 20\n","t2: 10 20\n","t1: 888 20\n","t2: 888 20\n","Test: 888 999\n"]}]},{"cell_type":"code","source":["#273\n","#Ex.1\n","class Test:\n","  a=10\n","  def __init__(self):\n","    self.b=20\n","  \n","t1=Test()\n","t2=Test()\n","Test.a=888\n","t1.b=999\n","print('t1:',t1.a,t1.b)\n","print('t2:',t2.a,t2.b)\n","print()\n","\n","#Ex.2\n","class Test:\n","  a=10\n","  def __init__(self):\n","    self.b=20\n","  def m1(self):\n","    self.a=888\n","    self.b=999\n","  \n","t1=Test()\n","t2=Test()\n","t1.m1()\n","print('t1:',t1.a,t1.b)\n","print('t2:',t2.a,t2.b)\n","print()\n","\n","#Ex.3\n","class Test:\n","  a=10\n","  def __init__(self):\n","    self.b=20\n","  def m1(self):\n","    self.a=888\n","    self.b=999\n","  \n","t1=Test()\n","t2=Test()\n","t1.m1()\n","t2.m1()\n","print('t1:',t1.a,t1.b)\n","print('t2:',t2.a,t2.b)\n","print()\n","\n","#Ex.4\n","class Test:\n","  a=10\n","  def __init__(self):\n","    self.b=20\n","  @classmethod\n","  def m1(cls):\n","    cls.a=888\n","    cls.b=999\n","  \n","t1=Test()\n","t2=Test()\n","t1.m1()\n","print('t1:',t1.a,t1.b)\n","print('t2:',t2.a,t2.b)\n","print('Test:',Test.a,Test.b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hcRGp7jxaGgn","executionInfo":{"status":"ok","timestamp":1640686296613,"user_tz":-330,"elapsed":648,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"f839c34c-fe75-4fd2-fbcb-ae38678ae02c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["t1: 888 999\n","t2: 888 20\n","\n","t1: 888 999\n","t2: 10 20\n","\n","t1: 888 999\n","t2: 888 999\n","\n","t1: 888 20\n","t2: 888 20\n","Test: 888 999\n"]}]},{"cell_type":"code","source":["#274\n","class Test:\n","  a=10\n","  def __init__(self):\n","    Test.b=20\n","    del Test.a\n","  def m1(self):\n","    Test.c=30\n","    del Test.b\n","  @classmethod\n","  def m2(cls):\n","    Test.d=40\n","    del Test.c\n","  @staticmethod\n","  def m3():\n","    Test.e=50\n","    del Test.d\n","\n","t=Test()\n","t.m1()\n","t.m2()\n","t.m3()\n","#del Test.e\n","print(Test.__dict__)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LGBU3SO9cUWr","executionInfo":{"status":"ok","timestamp":1640692384465,"user_tz":-330,"elapsed":14,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"3d4fc0bb-c1ea-4c4b-e8d4-0b039c005afa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'__module__': '__main__', '__init__': <function Test.__init__ at 0x7fa5cd403320>, 'm1': <function Test.m1 at 0x7fa5cd4035f0>, 'm2': <classmethod object at 0x7fa5cd412890>, 'm3': <staticmethod object at 0x7fa5cd412910>, '__dict__': <attribute '__dict__' of 'Test' objects>, '__weakref__': <attribute '__weakref__' of 'Test' objects>, '__doc__': None}\n"]}]},{"cell_type":"code","source":["#276 LOCAL VARIABLE\n","class Test:\n","  @staticmethod\n","  def average(list1):\n","    result=sum(list1)/len(list1)    #result is local variable\n","    print('The average:',result)\n","  \n","  def wish(name):\n","    for i in  range(10):             # i is local variable \n","      print('Good Evening:',name)\n","\n","list1=[10,20,30,40]\n","Test.average(list1)\n","Test.wish('JAY')\n","\n","\n"],"metadata":{"id":"kdgyyNXR09TK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640856411136,"user_tz":-330,"elapsed":461,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"816bd777-1345-4458-94a0-faf3cee748c4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The average: 25.0\n","Good Evening: JAY\n","Good Evening: JAY\n","Good Evening: JAY\n","Good Evening: JAY\n","Good Evening: JAY\n","Good Evening: JAY\n","Good Evening: JAY\n","Good Evening: JAY\n","Good Evening: JAY\n","Good Evening: JAY\n"]}]},{"cell_type":"code","source":["#277 MINI BANK APPLICATION\n","class Customer:\n","  '''This class developed by Jay and describes bank operation'''\n","  bankname='JAYBANK'                 #static variable\n","  def __init__(self,name,balance=0.0):          #constructor\n","    self.name=name \n","    self.balance=balance\n","  def deposit(self,amount):              #instance method       #Deposit method\n","    self.balance=self.balance+amount\n","    print('After deposit,balance :',self.balance)\n","  def withdraw(self,amount):            #instance method        #Withdraw method\n","    if amount>self.balance:\n","      print('Insufficient Funds...Cannot perform this operation')\n","    else:\n","      self.balance=self.balance-amount\n","      print('After withdraw,balance:',self.balance)\n","\n","print('WELCOME TO',Customer.bankname)\n","name=input('Enter your name:')\n","acc=int(input('Enter your 15 digit account number:'))\n","c=Customer(name)                       #creating object\n","while True:\n","  print('d-Deposit\\nw-Withdraw\\ne-Exit')\n","  option=input('Choose your option:')\n","  if option.lower()=='d':\n","    amount=float(input('Enter amount to deposit:'))\n","    c.deposit(amount)\n","  elif option.lower()=='w':\n","    amount=float(input('Enter amount to withdraw:'))\n","    c.withdraw(amount)\n","  elif option.lower()=='e':\n","    print('Thanks for Banking....Have a good day')\n","    break\n","  else:\n","    print('Your option is invalid...Please choose valid option')\n","                \n","\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-YBrcXiilitS","executionInfo":{"status":"ok","timestamp":1640865835391,"user_tz":-330,"elapsed":84649,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"cf7a64e2-3dd4-4cef-f2b0-ad186af04a73"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WELCOME TO DURGABANK\n","Enter your name:Jay\n","Enter your 15 digit account number:293290824383785\n","d-Deposit\n","w-Withdraw\n","e-Exit\n","Choose your option:d\n","Enter amount to deposit:50000\n","After deposit,balance : 50000.0\n","d-Deposit\n","w-Withdraw\n","e-Exit\n","Choose your option:d\n","Enter amount to deposit:35000\n","After deposit,balance : 85000.0\n","d-Deposit\n","w-Withdraw\n","e-Exit\n","Choose your option:w\n","Enter amount to withdraw:27000\n","After withdraw,balance: 58000.0\n","d-Deposit\n","w-Withdraw\n","e-Exit\n","Choose your option:w\n","Enter amount to withdraw:5200\n","After withdraw,balance: 52800.0\n","d-Deposit\n","w-Withdraw\n","e-Exit\n","Choose your option:d\n","Enter amount to deposit:90000\n","After deposit,balance : 142800.0\n","d-Deposit\n","w-Withdraw\n","e-Exit\n","Choose your option:e\n","Thanks for Banking....Have a good day\n"]}]},{"cell_type":"code","source":["#278 INSTANCE METHOD INTRODUCTION\n","class student:\n","  def __init__(self,name,marks):\n","    self.name=name\n","    self.marks=marks\n","  def display(self):\n","    print('Hello',self.name)\n","    print('your marks are :',self.marks)\n","  def grade(self):\n","    if self.marks>=60:\n","      print('Your got First grade')\n","    elif self.marks>=50:\n","      print('You got Second grade')\n","    elif self.marks>=35:\n","      print('You got Third grade')\n","    else:\n","      print('You are Failed')\n","\n","n=int(input('Enter number of student:'))\n","for i in range(n):\n","  name=input('Enter student name:')\n","  marks=int(input('Enter student marks:'))\n","  s=student(name,marks)\n","  s.display()\n","  s.grade()\n","  print()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vR1upa_FxK3r","executionInfo":{"status":"ok","timestamp":1640887904198,"user_tz":-330,"elapsed":89172,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"1bb3da18-a52f-42c0-bd0a-f83725f4927f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter number of student:4\n","Enter student name:Ravi\n","Enter student marks:93\n","Hello Ravi\n","your marks are : 93\n","Your got First grade\n","\n","Enter student name:Somu\n","Enter student marks:57\n","Hello Somu\n","your marks are : 57\n","You got Second grade\n","\n","Enter student name:Monu\n","Enter student marks:39\n","Hello Monu\n","your marks are : 39\n","You got Third grade\n","\n","Enter student name:Romu\n","Enter student marks:32\n","Hello Romu\n","your marks are : 32\n","You are Failed\n","\n"]}]},{"cell_type":"code","source":["#279 SETTER METHOD AND GETTER METHOD\n","class Student:\n","  def setName(self,name):\n","    self.name=name\n","  def getName(self):\n","    return self.name\n","  def setMarks(self,marks):\n","    self.marks=marks\n","  def getMarks(self):\n","    return self.marks\n","\n","n=int(input('Enter number of student:'))\n","students=[]\n","for i in range(n):\n","  s=Student()\n","  name=input('Enter Student name:')\n","  marks=int(input('Enter marks:'))\n","  s.setName(name)\n","  s.setMarks(marks)\n","  students.append(s)\n","\n","for s in student:\n","  print('Hello',s.getName())\n","  print('Your marks are :',s.getMarks())\n","  print()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y5llwX7ggyz2","executionInfo":{"status":"ok","timestamp":1640889931178,"user_tz":-330,"elapsed":39187,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"2eef1980-ef92-4b3c-e46f-5e2d85062dcb"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Enter number of student:4\n","Enter Student name:Ravi\n","Enter marks:89\n","Enter Student name:monu\n","Enter marks:78\n","Enter Student name:Amit\n","Enter marks:38\n","Enter Student name:Chomu\n","Enter marks:33\n"]}]},{"cell_type":"code","source":["#280 CLASS METHOD INTRODUCTION\n","class Bird:\n","  wings=2\n","  @classmethod\n","  def fly(cls,name):\n","    print('{} flying with {} wings'.format(name,cls.wings))\n","\n","Bird.fly('Parrot')\n","Bird.fly('Eagle')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HPOzYBdsph4n","executionInfo":{"status":"ok","timestamp":1640891405407,"user_tz":-330,"elapsed":15,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"4ba7f083-9a81-4bfd-e116-3fa5895529d9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Parrot flying with 2 wings\n","Eagle flying with 2 wings\n"]}]},{"cell_type":"code","source":["class Test:\n","  count=0\n","  def __init__(self):\n","    Test.count=Test.count+1\n","\n","  @classmethod\n","  def get_no_of_objects(cls):\n","    print('The number of objects created:',cls.count)\n","\n","Test.get_no_of_objects()\n","t1=Test()\n","t2=Test()\n","t3=Test()\n","t4=Test()\n","Test.get_no_of_objects()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ktg6vCX0v23f","executionInfo":{"status":"ok","timestamp":1640892136026,"user_tz":-330,"elapsed":17,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"5cf4b974-2340-42f6-924c-20e5a4805b2a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The number of objects created: 0\n","The number of objects created: 4\n"]}]},{"cell_type":"code","source":["#281 DIFFERENCE BETWEEN INSTANCE AND CLASS METHOD\n","#282 STATIC METHOD AND DEMO PROGRAMS\n","class Durgamath:\n","  @staticmethod\n","  def add(a,b):\n","    print('The sum:',(a+b))\n","\n","  @staticmethod\n","  def product(a,b):\n","    print('The product:',(a*b))\n","\n","  @staticmethod\n","  def average(a,b):\n","    print('The Average:',(a+b)/2)\n","  \n","Durgamath.add(10,20)\n","Durgamath.product(10,20)\n","Durgamath.average(10,20)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I5nCbwfVyvPZ","executionInfo":{"status":"ok","timestamp":1640893907928,"user_tz":-330,"elapsed":415,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"a7fa4465-6820-41c6-e040-c472e70d56ce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The sum: 30\n","The product: 200\n","The Average: 15.0\n"]}]},{"cell_type":"code","source":["#284 ACCESSSINNG MEMBERS OF ONE CLASS INSIDE ANOTHER CLASS\n","class Employee:          \n","  def __init__(self,eno,ename,esal):\n","    self.eno=eno\n","    self.ename=ename\n","    self.esal=esal\n","  def display(self):\n","    print('Employee Number:',self.eno)\n","    print('Employee Name:',self.ename)\n","    print('Employee Salary:',self.esal)\n","\n","class Manager:\n","  def update_emp_sal(emp):\n","    emp.esal=emp.esal+10000\n","    emp.display()\n","\n","emp=Employee(101,'Durga',45000)    \n","Manager.update_emp_sal(emp)\n"],"metadata":{"id":"iun5R3WW5f8L","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640948283068,"user_tz":-330,"elapsed":13,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"2886ad0f-dd40-40a9-aac1-954ab24b89db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Employee Number: 101\n","Employee Name: Durga\n","Employee Salary: 55000\n"]}]},{"cell_type":"code","source":["#285 INNER CLASSES INTROUCTION AND DEMO PROGRAMS\n","#Ex.1\n","class university:\n","  class department:\n","    pass\n","#Ex.2\n","class car:\n","  class engine:\n","    pass\n","#Ex. 3\n","class Outer:\n","  def __init__(self):\n","    print('Outer class object Creation...')\n","  class Inner:\n","    def __init__(self):\n","      print('Inner class object creation...')\n","    def m1(self):\n","      print('Inner class method...')\n","\n","Outer().Inner().m1()"],"metadata":{"id":"Yzm2xKHZIVjp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1640973503346,"user_tz":-330,"elapsed":14,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"9c4abc06-14a3-45dd-dd82-184c97a04626"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Outer class object Creation...\n","Inner class object creation...\n","Inner class method...\n"]}]},{"cell_type":"code","source":["#286 NESTING OF INNER CLASS AND DEMO PROGRAMS PART-1\n","class Outer:\n","  def __init__(self):\n","    print('Outer class object creation...')\n","  class Inner:\n","    def __init__(self):\n","      print('Inner class object creation...')\n","    class InnerInner:\n","      def __init__(self):\n","        print('InnerInner class object creation...')\n","      def m1(self):            #Instance method\n","        print('Inner class method...')\n","\n","Outer().Inner().InnerInner().m1()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NCG1rfO4mXWX","executionInfo":{"status":"ok","timestamp":1640974262442,"user_tz":-330,"elapsed":647,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"4678c06e-c6af-4338-ca25-f9fcc801f975"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Outer class object creation...\n","Inner class object creation...\n","InnerInner class object creation...\n","Inner class method...\n"]}]},{"cell_type":"code","source":["#287 PART-2\n","class Human:\n","  def __init__(self,name):\n","    print('Human object creation...')\n","    self.name=name\n","    self.Head=self.Head()    #creating human object\n","  def info(self):\n","    print('Hello, Myself :',self.name)\n","    print('I am full busy with,')\n","    self.Head.talk()\n","    self.Head.brain.think()\n","  class Head:\n","    def __init__(self):\n","      print('Head object Creation...')\n","      self.brain=self.Brain()\n","    def talk(self):\n","      print('Talking...')\n","    class Brain:\n","      def __init__(self):\n","        print('Brain object creation...')\n","      def think(self):\n","        print('Thinking...')\n","      \n","human=Human('Durga')\n","human.info()\n","  \n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Czrd8FGpmXrv","executionInfo":{"status":"ok","timestamp":1640976653191,"user_tz":-330,"elapsed":655,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"d5040ae0-6ef2-4e9f-d214-d0e242bdc07a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Human object creation...\n","Head object Creation...\n","Brain object creation...\n","Hello, Myself : Durga\n","I am full busy with,\n","Talking...\n","Thinking...\n"]}]},{"cell_type":"code","source":["#288 INNER CLASS DEMO PROGRAM-3\n","class Person:\n","  def __init__(self,name,dd,mm,yyyy):\n","    print('Person object creation...')\n","    self.name=name\n","    self.dob=self.Dob(dd,mm,yyyy)\n","  def info(self):\n","    print('Name :',self.name)\n","    self.dob.display()\n","  class Dob:\n","    def __init__(self,dd,mm,yyyy):\n","      print('DOB object creation...')\n","      self.dd=dd\n","      self.mm=mm\n","      self.yyyy=yyyy\n","    def display(self):\n","      print('DOB : {}/{}/{}'.format(self.dd,self.mm,self.yyyy))\n","\n","p=Person('JAY',27,3,2002)\n","p.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OPA_UQJpmbwX","executionInfo":{"status":"ok","timestamp":1640978995151,"user_tz":-330,"elapsed":32,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"362710b7-ee3c-4e80-f199-48fcbe08c728"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Person object creation...\n","DOB object creation...\n","Name JAY\n","DOB=27/3/2002\n"]}]},{"cell_type":"code","source":["#289 NESTED METHODS\n","class Test:\n","  def m1(self):\n","    def calc(a,b):\n","      print('The Sum:',a+b)\n","      print('The Product:',a*b)\n","      print('The Difference:',a-b)\n","      print('The Average:',(a+b)/2)\n","      print()\n","    calc(10,20)\n","    calc(100,200)\n","    calc(1000,2000)\n","t=Test()\n","t.m1()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4cl_iZ3f7dpk","executionInfo":{"status":"ok","timestamp":1640980823248,"user_tz":-330,"elapsed":595,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"87386a3b-826a-470f-a1a7-d999a2b439f2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The Sum: 30\n","The Product: 200\n","The Difference: -10\n","The Average: 15.0\n","\n","The Sum: 300\n","The Product: 20000\n","The Difference: -100\n","The Average: 150.0\n","\n","The Sum: 3000\n","The Product: 2000000\n","The Difference: -1000\n","The Average: 1500.0\n","\n"]}]},{"cell_type":"code","source":["#290 GARBAGE COLLECTION INTRODUCTION\n","#291 HOW TO ENABLE AND DISABLE GARBAGE COLLECTOR IN OUR PROGRAM\n","import gc\n","print(gc.isenabled())\n","gc.disable()\n","print(gc.isenabled())\n","#292 DESTRUCTOR INTRODUCTION\n","import time\n","class Test:\n","  def __init__(self):\n","    print('Object Initialization activity')\n","  def __del__(self):\n","    print('Fulfilling last wish ans performoing cleanup activities')\n","\n","t1=Test()\n","t2=Test()\n","print('End of application')\n"],"metadata":{"id":"ckwJTBT_DTxh","colab":{"base_uri":"https://localhost:8080/","height":270},"executionInfo":{"status":"error","timestamp":1641062770416,"user_tz":-330,"elapsed":490250,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"647d2ae0-4ba3-458a-f2be-40988e59fcbd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n","False\n","Object Initialization activity\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-fe449e12b751>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mTest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'End of application'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","source":["class Test:\n","  def __init__(self):\n","    print('Object Initialization activity')\n","  def __del__(self):\n","    print('Fulfilling last wish ans performoing cleanup activities')\n","\n","t1=Test()\n","t2=Test()\n","print('End of application')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0giEZMeu2dYI","executionInfo":{"status":"ok","timestamp":1641062792475,"user_tz":-330,"elapsed":546,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"cbe811cd-aa99-438d-cd29-d30e4a24c179"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Object Initialization activity\n","Object Initialization activity\n","End of application\n"]}]},{"cell_type":"code","source":["#293\n","import time\n","class Test:\n","  def __init__(self):\n","    print('Constructor execution...')\n","  def __del__(self):\n","    print('Destructor execution...')\n","t1=Test()\n","t2=t1\n","t3=t1\n","del t1\n","time.sleep(10)\n","print('Object not destroyed after deleting t1')\n","del t2\n","time.sleep(10)\n","print('Object not destroyed even after deleting t2')\n","time.sleep(10)\n","print('Deleting last reference...')\n","del t3\n","print('End of the program...')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uc0CWtg_9mBH","executionInfo":{"status":"ok","timestamp":1641064800894,"user_tz":-330,"elapsed":30428,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"45e7646b-6b46-49eb-c553-653b2434c01c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Constructor execution...\n","Object not destroyed after deleting t1\n","Object not destroyed even after deleting t2\n","Deleting last reference...\n","End of the program...\n","Destructor execution...\n"]}]},{"cell_type":"code","source":["import time\n","class Test:\n","  def __init__(self):\n","    print('Constructor execution...')\n","  def __del__(self):\n","    print('Destructor execution...')\n","\n","l=[Test(),Test(),Test()]\n","print('MAking object eligible for garbage collection..')\n","del l\n","time.sleep(10)\n","print('End of the application...')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zNLw2oP2FJvr","executionInfo":{"status":"ok","timestamp":1641065171104,"user_tz":-330,"elapsed":9929,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"ded5fa73-62ef-43bb-dbe8-dff1f5d6122c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Constructor execution...\n","Constructor execution...\n","Constructor execution...\n","MAking object eligible for garbage collection..\n","Destructor execution...\n","Destructor execution...\n","Destructor execution...\n","End of the application...\n"]}]},{"cell_type":"code","source":["#294\n","import time\n","class Test:\n","  def __init__(self):\n","    print('Constructor execution...')\n","  def __del__(self):\n","    print('Destructor execution...')\n","t=Test()\n","#del t\n","t=None\n","print('End of application !!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t1Y-fvRcGxkZ","executionInfo":{"status":"ok","timestamp":1641066817217,"user_tz":-330,"elapsed":550,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"d7ba8229-7f37-4597-b923-7a89d45fb97c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Constructor execution...\n","Destructor execution...\n","End of application !!\n"]}]},{"cell_type":"code","source":["import sys\n","class Test:\n","  pass\n","t1=Test()\n","t2=t1\n","t3=t2\n","t4=t3\n","del t3,t4\n","print(sys.getrefcount(t1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Et5c2m92Kflg","executionInfo":{"status":"ok","timestamp":1641066987941,"user_tz":-330,"elapsed":696,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"86d6725f-3e8e-4c44-c745-cf89a19af896"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n"]}]},{"cell_type":"code","source":["#295 HAS-A RELATIONSHIP DEMO PROGRAM-1\n","class Engine:\n","  def __init__(self):\n","    self.power='125KW'\n","  def useEngine(self):\n","    print('Engine specific functionality')\n","\n","class Car:\n","  def __init__(self):\n","    self.engine=Engine()\n","  def useCar(self):\n","    print('Car required Engine functionality')\n","    self.engine.useEngine()\n","    print(self.engine.power)\n","  \n","c=Car()\n","c.useCar()"],"metadata":{"id":"sLKRq02DNbmb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641145149087,"user_tz":-330,"elapsed":17,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"6669552b-ac24-442c-94e4-56facd98fe45"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Car required Engine functionality\n","Engine specific functionality\n","125KW\n"]}]},{"cell_type":"code","source":["#296 HAS-A RELATIONSHIP DEMO PROGRAM-2\n","class Car:\n","  def __init__(self,name,model,color):\n","    self.name=name\n","    self.model=model\n","    self.color=color\n","  def getInfo(self):\n","    print('Car Name:{},Model:{},Color :{}'.format(self.name,self.model,self.color))\n","\n","class Employee:\n","  def __init__(self,ename,eno,car):\n","    self.ename=ename\n","    self.eno=eno\n","    self.car=car\n","  def empInfo(self):\n","    print('Employee Name:',self.ename)\n","    print('Employee Number:',self.eno)\n","    print('Employee Car Info:')\n","    self.car.getInfo()\n","  \n","car=Car('Innova','2.5V','White')\n","e=Employee('Durga',878225,car)\n","e.empInfo()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5rfYC3E03022","executionInfo":{"status":"ok","timestamp":1641146769514,"user_tz":-330,"elapsed":7,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"cd9d7e1d-187b-4dbe-945f-46311f2b532a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Employee Name: Durga\n","Employee Number: 878225\n","Employee Car Info:\n","Car Name:Innova,Model:2.5V,Color :White\n"]}]},{"cell_type":"code","source":["#297 HAS-A RELATIONSHIP DEMO PROGRAM-3\n","class SportsNews:\n","  def sportsInfo(self):\n","    print('Sports Information-1')\n","    print('Sports Information-2')\n","    print('Sports Information-3')\n","    print('Sports Information-4')\n","class MovieNews:\n","  def moviesInfo(self):\n","    print('Movies Information-1')\n","    print('Movies Information-2')\n","    print('Movies Information-3')\n","    print('Movies Information-4')\n","class PoliticsNews:\n","  def politicsInfo(self):\n","    print('Politics Information-1')\n","    print('Politics Information-2')\n","    print('Politics Information-3')\n","    print('Politics Information-4')\n","\n","class DurgaNews:\n","  def __init__(self):\n","    self.sports=SportsNews()\n","    self.movies=MovieNews()\n","    self.politics=PoliticsNews()\n","  def getTotalNews(self):\n","    print('WELCOME TO DURGA NEWS')\n","    self.sports.sportsInfo()\n","    self.movies.moviesInfo()\n","    self.politics.politicsInfo()\n","\n","dnews=DurgaNews()\n","dnews.getTotalNews()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nO-Lss0s7CpL","executionInfo":{"status":"ok","timestamp":1641148398002,"user_tz":-330,"elapsed":12,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"5bd8ec19-93e3-4c9b-838f-b363bf65a96e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WELCOME TO DURGA NEWS\n","Sports Information-1\n","Sports Information-2\n","Sports Information-3\n","Sports Information-4\n","Movies Information-1\n","Movies Information-2\n","Movies Information-3\n","Movies Information-4\n","Politics Information-1\n","Politics Information-2\n","Politics Information-3\n","Politics Information-4\n"]}]},{"cell_type":"code","source":["#298 IS-A RELATIONSHIP INTRODUCTION & DEMO PROGRAM-1\n","class P:\n","  def m1(self):\n","    print('Parent class Method')\n","  \n","class C(P):\n","  def m2(self):\n","    print('Child class Method')\n","\n","c=C()\n","c.m1()\n","c.m2()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PDeJv4obD7Ik","executionInfo":{"status":"ok","timestamp":1641154755028,"user_tz":-330,"elapsed":14,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"c701db5a-a0f4-4da8-b209-e3e06c899d1a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Parent class Method\n","Child class Method\n"]}]},{"cell_type":"code","source":["class P:\n","  a=10\n","  def __init__(self):\n","    print('Parent Constructor')\n","    self.b=20\n","  def m1(self):\n","    print('Parent Instance Method')\n","  @classmethod\n","  def m2(cls):\n","    print('Parent class method')\n","  @staticmethod\n","  def m3():\n","    print('Parent static method')\n","\n","class C(P):\n","  pass\n","\n","c=C()\n","print(c.a)\n","print(c.b)\n","c.m1()\n","c.m2()\n","c.m3()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BMEgG0gVcazf","executionInfo":{"status":"ok","timestamp":1641155317376,"user_tz":-330,"elapsed":12,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"b2f9ccac-0d14-4144-d39d-ba6d214475c7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Parent Constructor\n","10\n","20\n","Parent Instance Method\n","Parent class method\n","Parent static method\n"]}]},{"cell_type":"code","source":["#299 DEVELOPONG PERSOM AND EMPLOYEE CLASS WITH INHERITANCE\n","class Person:\n","  def __init__(self,name,age):\n","    self.name=name\n","    self.age=age\n","  def eatndrink(self):\n","    print('Eat Biryani & Drink Beer')\n","class Employee(Person):\n","  def __init__(self,name,age,eno,esal):\n","    self.name=name\n","    self.age=age\n","    self.eno=eno\n","    self.esal=esal\n","  def work(self):\n","    print('Coding python programs')\n","  def empInfo(self):\n","    print('Employee Information..')\n","    print('Employee Name:',self.name)\n","    print('Employee Age:',self.age)\n","    print('Employee Number:',self.eno)\n","    print('Employee Salary:',self.esal)\n","\n","e=Employee('Durga',27,857675,30000)\n","e.eatndrink()\n","e.work()\n","e.empInfo()\n"," \n","\n"],"metadata":{"id":"Df3JeqUFepcM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641232418378,"user_tz":-330,"elapsed":708,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"83898484-45d8-4e32-ed01-1da4582243a3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Eat Biryani & Drink Beer\n","Coding python programs\n","Employee Information..\n","Employee Name: Durga\n","Employee Age: 27\n","Employee Number: 857675\n","Employee Salary: 30000\n"]}]},{"cell_type":"code","source":["#300 Inheritance Importance\n","#301 Is-A vs HAS-A relationship\n","class Car:\n","  def __init__(self,name,model,color):\n","    self.name=name\n","    self.model=model\n","    self.color=color\n","  def getinfo(self):\n","    print('\\tCar Name:{}\\n\\tModel:{}\\n\\tColor:{}'.format(self.name,self.model,self.color))\n","class Person:\n","  def __init__(self,name,age):\n","    self.name=name\n","    self.age=age\n","  def eatndrink(self):\n","    print('Eating Biryani & Drinking Beer')\n","\n","class Employee(Person):                    #IS-A RELATION\n","  def __init__(self,name,age,eno,esal,car):\n","    super().__init__(name,age)\n","    self.eno=eno\n","    self.esal=esal\n","    self.car=car\n","  def work(self):\n","    print('Coding Python programs..')\n","  def empinfo(self):\n","    print('Employee Name:',self.name)\n","    print('Employee Age:',self.age)\n","    print('Employee Number:',self.eno)\n","    print('Employee Salary:',self.esal)\n","    print('Employee Car Information')\n","    self.car.getinfo()   #Employee using cAR functionality\n","    \n","car=Car('Innova','2.5V','White')\n","e=Employee('Durga',28,874488,30000,car)\n","e.eatndrink()         #Employee using person class functionality\n","e.work()\n","e.empinfo()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5mDRN9X8D9b9","executionInfo":{"status":"ok","timestamp":1641237170983,"user_tz":-330,"elapsed":11,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"59647573-5e8a-445b-e566-832150797276"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Eating Biryani & Drinking Beer\n","Coding Python programs..\n","Employee Name: Durga\n","Employee Age: 28\n","Employee Number: 874488\n","Employee Salary: 30000\n","Employee Car Information\n","\tCar Name:Innova\n","\tModel:2.5V\n","\tColor:White\n"]}]},{"cell_type":"code","source":["#302 COMPOSITON AND AGGREGATION\n","#303 TYPES OF INHERITANCE\n","# 1. Single Inheritance\n","class P:\n","  def m1(self):\n","    print('Parent Method')\n","class C(P):\n","  def m2(self):\n","    print('Child Method')\n","c=C()\n","c.m1()\n","c.m2()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-zp9yJE0Rn6g","executionInfo":{"status":"ok","timestamp":1641241452396,"user_tz":-330,"elapsed":462,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"47de784e-0725-477f-a247-0a4f2f334b6f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Parent Method\n","Child Method\n"]}]},{"cell_type":"code","source":["#304 MULTIPLE INHERITANCE\n","class P1:\n","  def m1(self):\n","    print('Parent 1 method')\n","class P2:\n","  def m2(self):\n","    print('Parent 2 method')\n","  \n","class C(P1,P2):\n","  def m3(self):\n","    print('Child method')\n","c=C()\n","c.m1()\n","c.m2()\n","c.m3()\n","print('######################################################')\n","\n","class P1:\n","  def m1(self):\n","    print('Parent 1 method')\n","class P2:\n","  def m1(self):\n","    print('Parent 2 method')\n","class C(P1,P2):\n","  def m1(self):\n","    print('Child method')\n","c=C()\n","c.m1()\n","    "],"metadata":{"id":"tbnHtFICnNW8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641292599391,"user_tz":-330,"elapsed":651,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"10a284ca-9ce1-45df-e173-e5a1bb82550e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Parent 1 method\n","Parent 2 method\n","Child method\n","######################################################\n","Child method\n"]}]},{"cell_type":"code","source":["#306 Method Resolution order MRO algorithm -1`\n","class A:pass\n","class B(A):pass\n","class C(A):pass\n","class D(B,C):pass\n","print(A.mro())\n","print(B.mro())\n","print(C.mro())\n","print(D.mro())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"34SgMnHpk1Q-","executionInfo":{"status":"ok","timestamp":1641295846009,"user_tz":-330,"elapsed":603,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"ab393c2a-3389-4114-ef2a-46d7b4d4b879"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[<class '__main__.A'>, <class 'object'>]\n","[<class '__main__.B'>, <class '__main__.A'>, <class 'object'>]\n","[<class '__main__.C'>, <class '__main__.A'>, <class 'object'>]\n","[<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>]\n"]}]},{"cell_type":"code","source":["#307 MRO part-2\n","class A:\n","  def m1(self):\n","    print('A Class Method')\n","class B:\n","  def m1(self):\n","    print('A Class Method')\n","class C:\n","    def m1(self):\n","    print('A Class Method')\n","class D(A,B):\n","    def m1(self):\n","    print('A Class Method')\n","class E(B,C):\n","    def m1(self):\n","    print('A Class Method')\n","class F(D,E,C):\n","    def m1(self):\n","    print('A Class Method')\n","print(A.mro())  #AO\n","print(B.mro())  #BO\n","print(C.mro())  #CO\n","print(D.mro())  #DABO\n","print(E.mro())   #EBCO\n","print(F.mro())   #FDAEBCO\n","\n","f=F()\n","f.m1()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qtGh5UaYueh1","executionInfo":{"status":"ok","timestamp":1641306138087,"user_tz":-330,"elapsed":644,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"ba189b92-bcfc-46df-ac45-7c1e620a1b19"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[<class '__main__.A'>, <class 'object'>]\n","[<class '__main__.B'>, <class 'object'>]\n","[<class '__main__.C'>, <class 'object'>]\n","[<class '__main__.D'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>]\n","[<class '__main__.E'>, <class '__main__.B'>, <class '__main__.C'>, <class 'object'>]\n","[<class '__main__.F'>, <class '__main__.D'>, <class '__main__.A'>, <class '__main__.E'>, <class '__main__.B'>, <class '__main__.C'>, <class 'object'>]\n"]}]},{"cell_type":"code","source":["#309 Demo program -2 for MRO Algorithm\n","class A:\n","  def m1(self):\n","    print('A class method')\n","class B:\n","  def m1(self):\n","    print('B class method')\n","class C:\n","  def m1(self):\n","    print('C class method')\n","class D(A,B):\n","   pass\n","class E(A,C):\n","   pass\n","class F(D,E):\n","   pass\n","  \n","print(D.mro())\n","print(E.mro())\n","print(F.mro())\n","f=F()\n","f.m1()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R-WSBRImcwiy","executionInfo":{"status":"ok","timestamp":1641320782638,"user_tz":-330,"elapsed":565,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"5aa557bf-f218-4fbd-ba5f-3abb341b8a19"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[<class '__main__.D'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>]\n","[<class '__main__.E'>, <class '__main__.A'>, <class '__main__.C'>, <class 'object'>]\n","[<class '__main__.F'>, <class '__main__.D'>, <class '__main__.E'>, <class '__main__.A'>, <class '__main__.B'>, <class '__main__.C'>, <class 'object'>]\n","A class method\n"]}]},{"cell_type":"code","source":["#310 the complete STORY OF SUPER() FUNCTION -\n","class P:\n","  def m1(self):\n","    print('Parent method')\n","class C(P):\n","  def m1(self):\n","    super().m1()\n","    print('Child method')\n","\n","c=C()\n","c.m1()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e6tjkgX1UWtT","executionInfo":{"status":"ok","timestamp":1641321358397,"user_tz":-330,"elapsed":13,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"3478ec6a-1dd4-48fa-9fd2-d213377d297b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Parent method\n","Child method\n"]}]},{"cell_type":"code","source":["#311 super() function demo program-\n","class P:\n","  a=10\n","  def __init__(self):\n","    print('Parent Constructor')\n","  def m1(self):\n","    print('Parent Instance method')\n","  @classmethod\n","  def m2(cls):\n","    print('Parent class method')\n","  @staticmethod\n","  def m3():\n","    print('Parent static method')\n","class C(P):\n","  def __init__(self):\n","    print('Child constructor')\n","  def method1(self):\n","    print(self.a)\n","    self.m1()\n","    self.m2()\n","    self.m3()\n","    super().__init__()\n","\n","c=C()\n","c.method1()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SK5jkk3LXhMn","executionInfo":{"status":"ok","timestamp":1641322687674,"user_tz":-330,"elapsed":654,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"f4af94b5-099a-4111-ecb8-6b2f917243cc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Child constructor\n","10\n","Parent Instance method\n","Parent class method\n","Parent static method\n","Parent Constructor\n"]}]},{"cell_type":"code","source":["class Person:\n","  def __init__(self,name,age,height,weight):\n","    self.name=name\n","    self.age=age\n","    self.height=height\n","    self.weight=weight\n","  def display(self):\n","    print('Name:',self.name)\n","    print('Age:',self.age)\n","    print('Height:',self.height)\n","    print('Weight:',self.weight)\n","\n","class Student(Person):\n","  def __init__(self,name,age,height,weight,rollno,marks):\n","    super().__init__(name,age,height,weight)\n","    self.rollno=rollno\n","    self.marks=marks\n","  def display(self):\n","    super().display()\n","    print('Roll no :',self.rollno)\n","    print('Marks:',self.marks)\n","\n","s=Student('Ravi',24,5.6,70,101,95)\n","s.display()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fObdbStBbvZU","executionInfo":{"status":"ok","timestamp":1641323490543,"user_tz":-330,"elapsed":768,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"ae2c8961-31ae-4286-c266-378cb402d825"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Name: Ravi\n","Age: 24\n","Height: 5.6\n","Weight: 70\n","Roll no : 101\n","Marks: 95\n"]}]},{"cell_type":"code","source":["#312 How to call method of a partcular super class\n","class A:\n","  def m1(self):\n","    print('A class method')\n","class B(A):\n","  def m1(self):\n","    print('B class method')\n","class C(B):\n","  def m1(self):\n","    print('C class method')\n","class D(C):\n","  def m1(self):\n","    print('D class method')\n","class E(D):\n","  def m1(self):\n","    super().m1()   #super() returns the method of immediate parent ie, D\n","    #B.m1(self)     #returns the method of B class\n","    super(D,self).m1()    #returns the method of C class not D\n","e=E()\n","e.m1()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OsRlNeHnfZ7K","executionInfo":{"status":"ok","timestamp":1641324898215,"user_tz":-330,"elapsed":652,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"d3696716-9be3-4897-9213-79a6d54d73ed"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["D class method\n","B class method\n"]}]},{"cell_type":"code","source":["#313 super() vs Parent class instance variable\n","#314 Conclusions of super() function\n","#315 POLYMORPHISM BASIC INTRODUCTION\n","class P:\n","  def marry(self):\n","    print('Subhlaxmi')\n","class C(P):\n","  def marry(self):\n","    print('Katrina kaif ')\n","c=C()\n","c.marry()\n","print()\n","\n","#316 OPERATOR OVERLOADING INTRODUCTIN\n","print(10+20)    #arithmetic operator\n","print('Durga'+'soft')     #string concatenation \n","print()\n","class Book:\n","  def __init__(self,pages):\n","    self.pages=pages\n","  def __add__(self,other):\n","    total_pages=self.pages+other.pages\n","    return total_pages\n","\n","\n","b1=Book(100)\n","b2=Book(200)\n","b3=Book(500)\n","print(b1+b2)  #300\n","print(b1+b3)  #600\n","print(b2+b3)  #700"],"metadata":{"id":"8I-FnVHhk4Gz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641409051111,"user_tz":-330,"elapsed":957,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"2c3b0a13-9ae4-4180-943b-babb6c5f372e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Katrina kaif \n","\n","30\n","Durgasoft\n","\n","300\n","600\n","700\n"]}]},{"cell_type":"code","source":["#317 Operational overloading and corresponding magic method\n","class Student:\n","  def __init__(self,name,marks):\n","    self.name=name\n","    self.marks=marks\n","  def __gt__(self,other):             #Greater than..magic method\n","    return self.marks>other.marks\n","  def __le__(self,other):             #Less than equal to magic method\n","    return self.marks<=other.marks\n","  \n","s1=Student('Durga',87)\n","s2=Student('Ravi',92)\n","print(s1>s2)\n","print(s1<=s2)\n","    "],"metadata":{"id":"hLhEiCCBiUyR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641471262954,"user_tz":-330,"elapsed":653,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"c7aa3041-2a5f-49b0-8403-2c75c41122b1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["False\n","True\n"]}]},{"cell_type":"code","source":["#318 OVERLOADING OF MULTIPLICATION OPERATOR FOR EMPLOYEE OBJECTS\n","class Employee:\n","  def __init__(self,name,salaryperday):\n","    self.name=name\n","    self.salaryperday=salaryperday\n","  def __mul__(self,other):\n","    return self.salaryperday*other.workingdays\n","\n","class Timesheet:\n","  def __init__(self,name,workingdays):\n","    self.name=name\n","    self.workingdays=workingdays\n","  def __mul__(self,other):\n","    return self.workingdays*other.salaryperday\n","\n","\n","e=Employee('Durga',500)\n","t=Timesheet('Durga',25)\n","print('This Month Salary:',e*t)\n","print('This Month Salary:',t*e)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rmTDj0_RTza8","executionInfo":{"status":"ok","timestamp":1641472167120,"user_tz":-330,"elapsed":471,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"08c58e68-c078-4be5-eddb-c17339ffeb01"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["This Month Salary: 12500\n","This Month Salary: 12500\n"]}]},{"cell_type":"code","source":["#319 IMPORTANCE OF __STR__() METHOD:\n","class Student:\n","  def __init__(self,name,rollno,marks):\n","    self.name=name\n","    self.rollno=rollno\n","    self.marks=marks\n","  def __str__(self):\n","    #return self.name\n","    return 'Name:{}, RollNo:{}, Marks:{}'.format(self.name,self.rollno,self.marks)\n","    \n","\n","s1=Student('Durga',101,96)\n","s2=Student('Ravi',102,98)\n","print(s1)\n","print(s2)\n","  "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g3p6l18xWORy","executionInfo":{"status":"ok","timestamp":1641474254802,"user_tz":-330,"elapsed":524,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"6c898351-d124-43c7-ecdc-19a6ff07d124"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Name:Durga, RollNo:101, Marks:96\n","Name:Ravi, RollNo:102, Marks:98\n"]}]},{"cell_type":"code","source":["#320 OVERLOADING OF + OPERATOR FOR NESTING REQUIREMENT\n","class Book:\n","  def __init__(self,pages):\n","    self.pages=pages\n","  def __add__(self,other):\n","    print('Add method execution...')\n","    return Book(self.pages+other.pages)\n","  def __str__(self):\n","    return 'The Total number of pages:{}'.format(self.pages)\n","  def __mul__(self,other):\n","    print('Mul method execution...')\n","    return Book(self.pages*other.pages)\n","\n","\n","b1=Book(100)\n","b2=Book(200)\n","b3=Book(500)\n","print(b1+b2+b3)\n","print(b1+b2)\n","print(b2+b3)\n","print(b1+b3)\n","print(b1*b2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n0NfZtGPeTk4","executionInfo":{"status":"ok","timestamp":1641477664820,"user_tz":-330,"elapsed":652,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"ca97fd62-40ac-4293-a56b-43c6b8a26812"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Add method execution...\n","Add method execution...\n","The Total number of pages:800\n","Add method execution...\n","The Total number of pages:300\n","Add method execution...\n","The Total number of pages:700\n","Add method execution...\n","The Total number of pages:600\n","Mul method execution...\n","The Total number of pages:20000\n"]}]},{"cell_type":"code","source":["#321 METHOD OVERLOADING INTRODUCTION\n","class Test:\n","  def m1(self):\n","    print('No arg method')\n","  def m1(self,x):\n","    print('One arg method')\n","  def m1(self,x,y):\n","    print('Two arg method')\n","c=Test\n","c.m1(1,2,3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0rpc444giWXv","executionInfo":{"status":"ok","timestamp":1641486498792,"user_tz":-330,"elapsed":777,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"4e73e544-fb14-402b-f0db-c11569456d58"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Two arg method\n"]}]},{"cell_type":"code","source":["#322 WHY PHYTHON WON'T SUPPORT METHOD OVERLOADING\n","class Test:\n","  def m1(self,x):\n","    print('{} argument method'.format(x.__class__.__name__))\n","t=Test()\n","t.m1(10)\n","t.m1(10.5)\n","t.m1('Durga')\n","t.m1([2,4,5])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bFz5G5RrNtEl","executionInfo":{"status":"ok","timestamp":1641496139720,"user_tz":-330,"elapsed":12,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"209ed720-938b-4ba6-8518-25d96f43c3f6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["int argument method\n","float argument method\n","str argument method\n","list argument method\n"]}]},{"cell_type":"code","source":["#323 HOW TO DEFINE A METHOD WITH VARIABLE NO. OF ARGUMENTS -\n","class Test:\n","  def m1(self,a=None,b=None,c=None):\n","    if a is not None and b is not None and c is not None:\n","      print('Three-argument method')\n","    elif a is not None and b is not None:\n","      print('Two-argument method')\n","    elif a is not None:\n","      print('One-argument method')\n","    else:\n","      print('No argument method')\n","\n","t=Test()\n","t.m1()     #No argument method\n","t.m1(10)   #One argument method\n","t.m1(10,20)    #Two argument method\n","t.m1(10,20,30)   #Three argument method\n","\n","\n","\n"],"metadata":{"id":"g2D4T3mDyeTj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641551653464,"user_tz":-330,"elapsed":464,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"c52d3c34-ba55-4036-93b4-32c93b8df59b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["No argument method\n","One-argument method\n","Two-argument method\n","Three-argument method\n"]}]},{"cell_type":"code","source":["class Test:\n","  def m1(self,*args):\n","    total=0\n","    for x in args:\n","      total=total+x\n","    print('The sum :',total)\n","\n","t=Test()\n","t.m1()\n","t.m1(10)\n","t.m1(10,20)\n","t.m1(10,20,30)\n","t.m1(10,20,30,40,50)\n","t.m1(10,20,30,40,50,60,70,80,90)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S60KT4XMD8uS","executionInfo":{"status":"ok","timestamp":1641551551377,"user_tz":-330,"elapsed":501,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"385672f9-5e80-40b5-f906-e096ab3bbbea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The sum : 0\n","The sum : 10\n","The sum : 30\n","The sum : 60\n","The sum : 150\n","The sum : 450\n"]}]},{"cell_type":"code","source":["#324 CONSTRUCTOR OVERLOADING\n","class Test:\n","  def __init__(self):             #not to be considered\n","    print('No argument construtor')\n","  def __init__(self,x):       #not to be considered\n","    print('One argument constructor')\n","  def __init__(self,x,y):                #This is last constructor ,hence only this one will be considered \n","    print('Two argument constructor')\n","t=Test(10,20)\n","print()\n","class Test():\n","  def __init__(self,a=None,b=None,c=None):\n","    print('Constructor with 0/1/2/3 arguments')\n","t=Test()\n","t=Test(10)\n","t=Test(10,20)\n","t=Test(10,20,30)\n","print()\n","\n","class Test:\n","  def __init__(self,*args):\n","    print('Constructor with variable number of arguments')\n","\n","t=Test()\n","t=Test(10)\n","t=Test(10,20)\n","t=Test(10,20,30)\n","t=Test(10,20,30,40,50,60,70,80,90)\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LrsYHfAOFR00","executionInfo":{"status":"ok","timestamp":1641553515491,"user_tz":-330,"elapsed":649,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"a03e3de5-8171-4454-d26b-3b9269257882"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Two argument constructor\n","\n","Constructor with 0/1/2/3 arguments\n","Constructor with 0/1/2/3 arguments\n","Constructor with 0/1/2/3 arguments\n","Constructor with 0/1/2/3 arguments\n","\n","Constructor with variable number of arguments\n","Constructor with variable number of arguments\n","Constructor with variable number of arguments\n","Constructor with variable number of arguments\n","Constructor with variable number of arguments\n"]}]},{"cell_type":"code","source":["#325 METHOD OVERRIDING AND CONSTRUCTOR \n","class Parent:\n","  def property(self):\n","    print('Land+Gold+Cash+Power')\n","  def  marry(self):\n","    print('Anushka')\n","\n","class Child(Parent):\n","  def marry(self):\n","    super().marry()\n","    print('Katrina')\n","  \n","c=Child()\n","c.property()\n","c.marry()\n","print()\n","class Parent:\n","  def __init__(self):\n","    print('Parent Constructor')\n","class Child(Parent):\n","  def __init__(self):\n","    super().__init__()           #Calling parent class constructor\n","    print('Child Constructor')\n","\n","c=Child()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NgPOyjy5KGnw","executionInfo":{"status":"ok","timestamp":1641560160628,"user_tz":-330,"elapsed":457,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"60c46118-b0cf-48bf-d680-0a487a4359e7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Land+Gold+Cash+Power\n","Anushka\n","Katrina\n","\n","Parent Constructor\n","Child Constructor\n"]}]},{"cell_type":"code","source":["#326 OVERRIDING DEMO PROGRAMS\n","#Same program as there was in #311(2nd part)\n","#327 Polymorphism summary\n","#328 Abstract method and Abstract class\n","from abc import ABC,abstractmethod\n","class Vehicle(ABC):\n","  @abstractmethod\n","  def getNoofWheels(self):\n","    pass\n","class Bus(Vehicle):\n","  def getNoofWheels(self):\n","    return 6\n","class Auto(Vehicle):\n","  def getNoofWheels(self):\n","    return 3\n","b=Bus()\n","print(b.getNoofWheels())\n","#329 Imp conclusions of abstract method\n","class Test(ABC):\n","  @abstractmethod\n","  def m1(self):\n","    pass\n","  @abstractmethod\n","  def m2(self):\n","    pass\n","class SubTest(Test):\n","  def m1(self):\n","    print('m1 method execution')\n","  def m2(self):\n","    print('m2 method execution')\n","s=SubTest()\n","s.m1()\n","s.m2()\n","  "],"metadata":{"id":"48rjMMHUh_bI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1641751513489,"user_tz":-330,"elapsed":1838,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"75758838-7702-4e45-b937-c5e1a5df5d0e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["6\n","m1 method execution\n","m2 method execution\n"]}]},{"cell_type":"code","source":["#330 INTERFACE IN PYTHON\n","from abc import *\n","class CollegeAutomation(ABC):\n","  @abstractmethod\n","  def m1(self):pass\n","  @abstractmethod\n","  def m1(self):pass\n","  @abstractmethod\n","  def m1(self):pass\n","class Durgasoft(CollegeAutomation):\n","  def m1(self):\n","    print('m1 method execution')\n","  def m2(self):\n","    print('m2 method execution')\n","  def m3(self):\n","    print('m3 method execution')\n","d=Durgasoft()\n","d.m1()\n","d.m2()\n","d.m3()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BwfD8bl_xRYe","executionInfo":{"status":"ok","timestamp":1641752967793,"user_tz":-330,"elapsed":788,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"29b036fd-e02e-432a-c373-dcd52c1366fb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["m1 method execution\n","m2 method execution\n","m3 method execution\n"]}]},{"cell_type":"code","source":["#331 Interface vsAbstract class vs Concrete class\n","from abc import *\n","class CollegeAutomation(ABC):        #INTERFACE CONCEPT\n","  @abstractmethod                    \n","  def m1(self):pass\n","  @abstractmethod\n","  def m2(self):pass\n","  @abstractmethod\n","  def m3(self):pass\n","class AbsClass(CollegeAutomation):           #ABSTRACT METHOD\n","  def m1(self):\n","    print('m1 method execution')\n","  def m2(self):\n","    print('m2 method execution')\n","\n","class Concreteclass(AbsClass):          #CONCRETE METHOD\n","  def m3(self):\n","    print('m3 method execution')\n","c=Concreteclass()\n","c.m1()\n","c.m2()\n","c.m3()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VHtoSryV0-3m","executionInfo":{"status":"ok","timestamp":1641754125207,"user_tz":-330,"elapsed":528,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"5078a9c1-7147-4061-87a3-2b5e71df632f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["m1 method execution\n","m2 method execution\n","m3 method execution\n"]}]},{"cell_type":"code","source":["#332 Public members\n","#333 PRIVATE MEMBERS\n","class Test:\n","  def __init__(self):\n","    self.__x=10      #private variable\n","  def __m1(self):\n","    print('It is private method')\n","  def m2(self):\n","    print(self.__x)     \n","    self.__m1()\n","t=Test()\n","t.m2()\n","#print(t.__x)       # Error    because we cant access private method from outside  \n","print(t._Test__x)      #NAME MANGLING - ACCESSING PRIVATE VARIABLE\n","t._Test__m1()              #ACCESSING PRIVATE METHOD"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6_GRi6M-K1s2","executionInfo":{"status":"ok","timestamp":1641756168110,"user_tz":-330,"elapsed":567,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"fbe94847-1b2e-4cee-ab42-84c29b32a82c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","It is private method\n","10\n","It is private method\n"]}]},{"cell_type":"code","source":["#334 PROTECTED MEMBERS\n","class Test:\n","  def __init__(self):\n","    self._x=10      #PROTECTED VARIBLE\n","  def m1(self):\n","    print(self._x)\n","class Subtest(Test):\n","  def m2(self):\n","    print(self._x)\n","t=Subtest()\n","t.m1()\n","t.m2()\n","print(t._x)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"top2j8gqP008","executionInfo":{"status":"ok","timestamp":1641756811362,"user_tz":-330,"elapsed":16,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"d4fd1749-736e-4103-ae5e-96215ff887db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","10\n","10\n"]}]},{"cell_type":"code","source":["#335 DATA HIDING\n","class Account:\n","  def __init__(self,initial_balance):\n","    #self.balance=initial_balance    #Normal representation , anyone can access\n","    self.__balance=initial_balance      #Private variable\n","  def getBalance(self):\n","    #validation or authentication\n","    return self.__balance\n","\n","a=Account(10000)\n","#print(a.__balance)   #it will show error\n","print(a.getBalance())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GEEXOla_VDsO","executionInfo":{"status":"ok","timestamp":1641757997588,"user_tz":-330,"elapsed":615,"user":{"displayName":"Jay Barode","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"13781167781472862626"}},"outputId":"c3ed36a4-ac7a-47de-df65-9364ac671f9e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10000\n"]}]},{"cell_type":"code","source":["#336 ABSTRACTION\n","#337 ENCAPSULATION\n"],"metadata":{"id":"MSFVPaY9YPew"},"execution_count":null,"outputs":[]}]}